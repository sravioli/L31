# Configuration Options
#
# All fields configured in the [YamlfixConfig][1] class can be provided through 
# the means mentioned in Configuration. Here are the currently available 
#configuration options with short examples on their impact to provided 
# yaml-files.
# 
# [1]: https://lyz-code.github.io/yamlfix/reference/#yamlfix.model.YamlfixConfig


# Allow Duplicate Keys
#
# This option toggles the [ruyaml][1] duplicate keys check. With this setting 
# set to `False`, yamlfix will throw an error if the same key is defined more 
# than once in a mapping/dictionary. To allow using the same key, set this value 
# to `True`. You might want to enable this option, if you want to use multiple 
# yaml-anchor merge keys, instead of providing them as sequence / list elements - 
# see: https://github.com/pycontribs/ruyaml/issues/43
#
# [1]: https://ruyaml.readthedocs.io/en/latest/api.html#duplicate-keys
allow_duplicate_keys = false

# Comments Min Spaces From Content
#
# This option enforces minimum spacing between the content of a line and the 
# start of an inline-comment. It is the enforcement implementation to the 
# yamllint rule rules.comments.min-spaces-from-content - 
# see: https://yamllint.readthedocs.io/en/stable/rules.html#module-yamllint.rules.comments
comments_min_spaces_from_content = 2


# Comments Require Starting Space
#
# This option enforces a space between the comment indicator (#) and the first 
# character in the comment. It implements the enforcement of the yamllint rule 
# rules.comments.require-starting-space - 
# see: https://yamllint.readthedocs.io/en/stable/rules.html#module-yamllint.rules.comments
comments_require_starting_space = true

# Whitelines Adjusting
#
# This option allows to keep a specified number of whitelines between lines.
#
# It's useful if, for one, you like to separate GitHub Actions job steps or 
# Docker-Compose service definitions with a blank line.
#
# Bear in mind that, like Comments Whitelines, it won't insert whitelines if 
# there's no whitelines in the first place. It will only fix 1 or more 
# whitelines to the desired amount (or remove them completely by default).
whitelines = 1

# Comments Whitelines
#
# This option allows to add a specific number of consecutive whitelines before 
# a comment-only line.
#
# A comment-only line is defined as a line that starts with a comment or with 
# an indented comment.
#
# Before a comment-only line, either:
#
# - 0 whiteline is allowed
# - Exactly `comments_whitelines` whitelines are allowed
comments_whitelines = 1

# Section Whitelines
#
# This option sets the number of whitelines before and after a section. A 
# section is defined as a top-level key followed by at least one line with 
# indentation. Section examples:
#
# ```yaml
# section1:
#   key: value
#
# list:
#   - value
# ````
# 
# There are a few exceptions to this behaviour:
# - If there is a comment(s) on the line(s) preceding beginning of a section, 
#   `comments_whitelines` rules will be applied to whitelines before the section. 
#    e.g.
#    ```yaml 
#    # Comment
#    section:
#      key: value
#    ```
# - Sections at the start and end of the document will have whitelines removed 
#   before and after respectively.
section_whitelines = 1

# Config Path
#
# Configure the base config-path that maison will look for a pyproject.toml 
# configuration file. This path is traversed upwards until such a file is found.
# config_path = ""

# Explicit Document Start
#
# Add or remove the explicit document start (---) for yaml-files. For example:
#
# Set to true:
#
# ```yaml
# ---
# project_name: yamlfix
# ```
#
# Set to false:
#
# ```yaml
# project_name: yamlfix
# ```
explicit_start = true

# Sequence (List) Style
#
# Available values: flow_style, block_style, keep_style
#
# Transform sequences (lists) to either flow-style, block-style or leave them 
# as-is. If enabled yamlfix will also ensure, that flow-style lists are 
# automatically converted to block-style if the resulting key+list elements 
# would breach the line-length. For example:
#
# Set to true (flow-style):
#
# ```yaml
# ---
# list: [item, item, item]
# ```
#
# Set to false (block-style):
#
#
# ```yaml
# ---
# list:
#   - item
#   - item
#   - item
# ```
sequence_style = "flow_style"

# Indentation
#
# Provide the ruyaml configuration for indentation of mappings (dicts) and 
# sequences (lists) and the indentation offset for elements. See the ruyaml 
# configuration documentation: 
# https://ruyaml.readthedocs.io/en/latest/detail.html#indentation-of-block-sequences
indent_mapping = 2
indent_offset = 2
indent_sequence = 4

# Line Length (Width)
#
# Configure the line-length / width configuration for ruyaml. With this 
# configuration long multiline-strings will be wrapped at that point and 
# flow-style lists will be converted to block-style if they are longer than 
# the provided value.
line_length = 80

# None Representation
#
# In yaml-files an absence of a value can be described in multiple canonical 
# ways. This configuration enforces a user-defined representation for None 
# values. For example:
#
# Valid None representation values are `(empty string), null, Null, NULL, ~`.
#
# Provided the source yaml file looks like this:
#
# ```yaml
# none_value1:
# none_value2: null
# none_value3: Null
# none_value4: NULL
# none_value5: ~
# ```
# 
# The default behaviour (empty string) representation would look like this:
#
# ```yaml
# none_value1:
# none_value2:
# none_value3:
# none_value4:
# none_value5:
# ```
# 
# With this option set to none_representation="null" it would look like this:
#
# ```yaml
# none_value1: null
# none_value2: null
# none_value3: null
# none_value4: null
# none_value5: null
# ```
none_representation = "~"

# Quote Basic Values
#
# Per default ruyaml will quote only values where it is necessary to explicitly 
# define the type of a value. This is the case for numbers and boolean values 
# for example. If your yaml-file contains a value of type string that would look 
# like a number, then this value needs to be quoted.
#
# This option allows for quoting of all simple values in mappings (dicts) and 
# sequences (lists) to enable a homogeneous look and feel for string lists / 
# simple key/value mappings. For example:
#
# ```yaml
# # option set to false
# stringKey1: abc
# stringKey2: "123"
# stringList: [abc, "123"]
# ```
# 
# ```yaml
# # option set to true
# stringKey1: "abc"
# stringKey2: "123"
# stringList: ["abc", "123"]
# ```
quote_basic_values = false

# Quote Keys and Basic Values
#
# Similar to the quote basic values configuration option, this option, in 
# addition to the values themselves, quotes the keys as well. For example:
#
# ```yaml
# # option set to false
# key: value
# list: [item, item]
# ```
# 
# ```yaml
# # option set to true
# "key": "value"
# "list": ["item", "item"]
# ```
quote_keys_and_basic_values = false


# Quote Representation
#
# Configure which quotation string is used for quoting values. For example:
#
# ```yaml
# # Option set to: '
# key: 'value'
# ```
#
# ```yaml
# # Option set to: "
# key: "value"
# ```
quote_representation = '"'

# Preserve Quotes
#
# Keep quotes as they are
#
# ```yaml
# # original
# key: [value, 'value with spaces']
# ```
#
# ```yaml
# # Option set to: false
# key: [value, value with spaces]
# ```
#
# ```yaml
# # Option set to: true
# key: [value, 'value with spaces']
# ```
# 
# Notes:
# You may NOT want to use it in combination with quote basic values or quote 
# keys and basic values, because the output may not be uniform
#
# Example: quote_basic_values
#
# ```yaml
# # original
# key: [value, 'value with spaces']
# ```
#
# ```yaml
# # preserve_quotes = true
# # quote_basic_values = true
# # quote_representation = "
# key: ["value", 'value with spaces']
# ```
#
# Example: quote_keys_and_basic_values
#
# ```yaml
# # original
# key: [value, 'value with spaces']
# ```
#
# ```yaml
# # preserve_quotes = true
# # quote_keys_and_basic_values = true
# # quote_representation = "
# "key": ["value", 'value with spaces']
# ```
preserve_quotes = false
